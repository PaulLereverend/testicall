## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input BooleanInput {
  ne: Boolean
  eq: Boolean
}

input CreateGameInput {
  id: String!
  userId: String!
  isFinished: Boolean!
  score: Int
  theme: String
  difficulty: Int
}

type FullGameData {
  theme: String!
  data: [GameData!]!
}

"""@model"""
type Game {
  """@id"""
  id: String!
  userId: String!
  isFinished: Boolean!
  score: Int
  theme: String
  difficulty: Int
}

type GameData {
  question: String!
  answers: [String!]!
  correctAnswer: Int!
}

input GameFilter {
  id: StringInput
  userId: StringInput
  isFinished: BooleanInput
  score: IntInput
  theme: StringInput
  difficulty: IntInput
  and: [GameFilter!]
  or: [GameFilter!]
  not: GameFilter
}

type GameResultList {
  items: [Game]!
  offset: Int
  limit: Int
  count: Int
}

input GameSubscriptionFilter {
  and: [GameSubscriptionFilter!]
  or: [GameSubscriptionFilter!]
  not: GameSubscriptionFilter
  id: StringInput
  userId: StringInput
  isFinished: BooleanInput
  score: IntInput
  theme: StringInput
  difficulty: IntInput
}

type GeneratedGame {
  id: String!
  gameData: FullGameData!
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutateGameInput {
  id: String!
  userId: String
  isFinished: Boolean
  score: Int
  theme: String
  difficulty: Int
}

type Mutation {
  generateGame(theme: String!, difficulty: Int): GeneratedGame
  setGameScore(id: String!, score: Int!): Boolean
  createGame(input: CreateGameInput!): Game
  updateGame(input: MutateGameInput!): Game
  deleteGame(input: MutateGameInput!): Game
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getUserGames: [Game]
  getThemes: [String]
  getGame(id: String!): Game
  findGames(filter: GameFilter, page: PageRequest, orderBy: OrderByInput): GameResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newGame(filter: GameSubscriptionFilter): Game!
  updatedGame(filter: GameSubscriptionFilter): Game!
  deletedGame(filter: GameSubscriptionFilter): Game!
}